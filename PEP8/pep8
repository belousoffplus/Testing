# PEP 8 — Руководство по стилю кодирования на Python (Русская версия)

Это перевод PEP 8, руководства по написанию читаемого и согласованного кода на Python. Следование этим правилам помогает сделать ваш код более понятным для других разработчиков.

---

## Содержание

1. [Введение](#введение)
2. [Основные правила](#основные-правила)
3. [Отступы](#отступы)
4. [Максимальная длина строки](#максимальная-длина-строки)
5. [Вставки пробелов](#вставки-пробелов)
6. [Белые строки](#белые-строки)
7. [Импорты](#импорты)
8. [Линии пустых строк](#линии-пустых-строк)
9. [Комментарии](#комментарии)
10. [Имена переменных и функций](#имена-переменных-и-функций)
11. [Программирование](#программирование)
12. [Заключение](#заключение)

---

## Введение

PEP 8 — это руководство по стилю кодирования на Python. Его цель — улучшить читаемость кода и сделать его последовательным. Хотя стиль может быть субъективным, PEP 8 предлагает набор стандартов, которые должны следовать все проекты Python.

> **Правило:** Если вы используете существующий стиль в проекте, придерживайтесь его, даже если он отличается от PEP 8.

---

## Основные правила

1. Код должен быть читаемым.
2. Читаемость важнее, чем следование строгим правилам.
3. Избегайте избыточности, если она не улучшает читаемость.
4. Пишите код так, чтобы другие могли легко его понять.

---

## Отступы

- Используйте **4 пробела** на уровне отступа.
- Не используйте табуляции.
- Конфигурационные файлы редакторов должны быть настроены для замены табуляций на пробелы.

```python
# Правильно
def function():
    print("Hello, World!")

# Неправильно
def function():
	print("Hello, World!")
```

---

## Максимальная длина строки

- Максимальная длина строки должна быть **79 символов**.
- Для строк документации и комментариев рекомендуется ограничение в **72 символа**.
- При необходимости используйте обратный слеш (`\`) или круглые скобки для переноса строки.

```python
# Правильно
very_long_variable_name = (
    another_very_long_variable_name + third_very_long_variable_name
)

# Неправильно
very_long_variable_name = another_very_long_variable_name + third_very_long_variable_name
```

---

## Вставки пробелов

### Между операторами
- Добавляйте пробелы вокруг бинарных операторов: `=`, `==`, `<`, `>`, `+`, `-`, и т.д.

```python
# Правильно
x = x + y
a = (b + c) * (d + e)

# Неправильно
x=x+y
a=(b+c)*(d+e)
```

### После запятой
- Добавляйте один пробел после каждой запятой.

```python
# Правильно
my_list = [1, 2, 3]
print(x, y, z)

# Неправильно
my_list=[1,2,3]
print(x,y,z)
```

### Внутри круглых скобок
- Не добавляйте пробелы внутри круглых скобок.

```python
# Правильно
function(arg1, arg2)

# Неправильно
function( arg1, arg2 )
```

---

## Белые строки

- Используйте пустые строки для логического разделения блоков кода.
- Между функциями и классами добавляйте **две пустые строки**.
- Внутри классов между методами добавляйте **одну пустую строку**.

```python
# Правильно
class MyClass:
    def method1(self):
        pass

    def method2(self):
        pass


def function1():
    pass


def function2():
    pass
```

---

## Импорты

- Все импорты должны быть в начале файла.
- Используйте следующий порядок:
  1. Стандартная библиотека Python.
  2. Третьесторонние библиотеки.
  3. Локальные модули.

- Разделяйте группы импортов пустой строкой.

```python
# Правильно
import os
import sys

import requests

from my_module import MyClass
from my_module import my_function
```

---

## Линии пустых строк

- Не оставляйте пустые строки в конце файла, за исключением одной.
- Убедитесь, что файл заканчивается новой строкой.

```python
# Правильно
def function():
    pass

# Одна пустая строка в конце файла
```

---

## Комментарии

- Комментарии должны быть полезными и объяснять "почему", а не "что".
- Используйте английский язык для комментариев в международных проектах.
- Комментарии должны начинаться с заглавной буквы и заканчиваться точкой.

```python
# Правильно
# Эта функция обрабатывает входные данные пользователя
def process_data(data):
    pass

# Неправильно
# эта функция делает что-то
def process_data(data):
    pass
```

---

## Имена переменных и функций

- Используйте нижнее подчеркивание для разделения слов: `my_variable`, `my_function`.
- Классы именуются в CamelCase: `MyClass`.
- Константы пишутся заглавными буквами с подчеркиванием: `MAX_CONNECTIONS`.

```python
# Правильно
def my_function():
    pass

class MyClass:
    pass

MAX_CONNECTIONS = 100

# Неправильно
def myFunction():
    pass

class my_class:
    pass
```

---

## Программирование

- Избегайте использования глобальных переменных.
- Используйте `if __name__ == "__main__":` для выполнения кода только при прямом вызове скрипта.

```python
# Правильно
if __name__ == "__main__":
    main()
```

---

## Заключение

Следование PEP 8 помогает сделать ваш код более читаемым и профессиональным. Это особенно важно в крупных проектах, где несколько разработчиков работают над одним кодом.

Если у вас есть вопросы или предложения, обращайтесь к оригинальному PEP 8 на английском языке: [PEP 8 (англ.)](https://www.python.org/dev/peps/pep-0008/).

--- 

*Этот документ является переводом PEP 8 на русский язык.*
